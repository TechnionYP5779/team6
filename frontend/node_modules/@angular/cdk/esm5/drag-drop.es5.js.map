{"version":3,"file":"drag-drop.es5.js","sources":["../../../src/cdk/drag-drop/drag-drop-module.ts","../../../src/cdk/drag-drop/drop-list.ts","../../../src/cdk/drag-drop/drop-list-group.ts","../../../src/cdk/drag-drop/drag-utils.ts","../../../src/cdk/drag-drop/drag.ts","../../../src/cdk/drag-drop/transition-duration.ts","../../../src/cdk/drag-drop/drop-list-container.ts","../../../src/cdk/drag-drop/drag-preview.ts","../../../src/cdk/drag-drop/drag-placeholder.ts","../../../src/cdk/drag-drop/drag-handle.ts","../../../src/cdk/drag-drop/drag-styling.ts","../../../src/cdk/drag-drop/drag-parent.ts","../../../src/cdk/drag-drop/drag-drop-registry.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkDropList} from './drop-list';\nimport {CdkDropListGroup} from './drop-list-group';\nimport {CdkDrag} from './drag';\nimport {CdkDragHandle} from './drag-handle';\nimport {CdkDragPreview} from './drag-preview';\nimport {CdkDragPlaceholder} from './drag-placeholder';\n\n@NgModule({\n  declarations: [\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n  ],\n  exports: [\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n  ],\n})\nexport class DragDropModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceArray, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  Optional,\n  Directive,\n  ChangeDetectorRef,\n  SkipSelf,\n} from '@angular/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {CdkDrag} from './drag';\nimport {DragDropRegistry} from './drag-drop-registry';\nimport {CdkDragDrop, CdkDragEnter, CdkDragExit, CdkDragSortEvent} from './drag-events';\nimport {moveItemInArray} from './drag-utils';\nimport {CDK_DROP_LIST_CONTAINER} from './drop-list-container';\nimport {CdkDropListGroup} from './drop-list-group';\n\n\n/** Counter used to generate unique ids for drop zones. */\nlet _uniqueIdCounter = 0;\n\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n\n/**\n * Object used to cache the position of a drag list, its items. and siblings.\n * @docs-private\n */\ninterface PositionCache {\n  /** Cached positions of the items in the list. */\n  items: ItemPositionCacheEntry[];\n  /** Cached positions of the connected lists. */\n  siblings: ListPositionCacheEntry[];\n  /** Dimensions of the list itself. */\n  self: ClientRect;\n}\n\n/**\n * Entry in the position cache for draggable items.\n * @docs-private\n */\ninterface ItemPositionCacheEntry {\n  /** Instance of the drag item. */\n  drag: CdkDrag;\n  /** Dimensions of the item. */\n  clientRect: ClientRect;\n  /** Amount by which the item has been moved since dragging started. */\n  offset: number;\n}\n\n/**\n * Entry in the position cache for drop lists.\n * @docs-private\n */\ninterface ListPositionCacheEntry {\n  /** Instance of the drop list. */\n  drop: CdkDropList;\n  /** Dimensions of the list. */\n  clientRect: ClientRect;\n}\n\n/** Container that wraps a set of draggable items. */\n@Directive({\n  selector: '[cdkDropList], cdk-drop-list',\n  exportAs: 'cdkDropList',\n  providers: [\n    // Prevent child drop lists from picking up the same group as their parent.\n    {provide: CdkDropListGroup, useValue: undefined},\n    {provide: CDK_DROP_LIST_CONTAINER, useExisting: CdkDropList},\n  ],\n  host: {\n    'class': 'cdk-drop-list',\n    '[id]': 'id',\n    '[class.cdk-drop-list-dragging]': '_dragging'\n  }\n})\nexport class CdkDropList<T = any> implements OnInit, OnDestroy {\n  /** Draggable items in the container. */\n  @ContentChildren(forwardRef(() => CdkDrag)) _draggables: QueryList<CdkDrag>;\n\n  /**\n   * Other draggable containers that this container is connected to and into which the\n   * container's items can be transferred. Can either be references to other drop containers,\n   * or their unique IDs.\n   */\n  @Input('cdkDropListConnectedTo')\n  connectedTo: (CdkDropList | string)[] | CdkDropList | string = [];\n\n  /** Arbitrary data to attach to this container. */\n  @Input('cdkDropListData') data: T;\n\n  /** Direction in which the list is oriented. */\n  @Input('cdkDropListOrientation') orientation: 'horizontal' | 'vertical' = 'vertical';\n\n  /**\n   * Unique ID for the drop zone. Can be used as a reference\n   * in the `connectedTo` of another `CdkDropList`.\n   */\n  @Input() id: string = `cdk-drop-list-${_uniqueIdCounter++}`;\n\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\n  @Input('cdkDropListLockAxis') lockAxis: 'x' | 'y';\n\n  /** Whether starting a dragging sequence from this container is disabled. */\n  @Input('cdkDropListDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled = false;\n\n  /**\n   * Function that is used to determine whether an item\n   * is allowed to be moved into a drop container.\n   */\n  @Input('cdkDropListEnterPredicate')\n  enterPredicate: (drag: CdkDrag, drop: CdkDropList) => boolean = () => true\n\n  /** Emits when the user drops an item inside the container. */\n  @Output('cdkDropListDropped')\n  dropped: EventEmitter<CdkDragDrop<T, any>> = new EventEmitter<CdkDragDrop<T, any>>();\n\n  /**\n   * Emits when the user has moved a new drag item into this container.\n   */\n  @Output('cdkDropListEntered')\n  entered: EventEmitter<CdkDragEnter<T>> = new EventEmitter<CdkDragEnter<T>>();\n\n  /**\n   * Emits when the user removes an item from the container\n   * by dragging it into another container.\n   */\n  @Output('cdkDropListExited')\n  exited: EventEmitter<CdkDragExit<T>> = new EventEmitter<CdkDragExit<T>>();\n\n  /** Emits as the user is swapping items while actively dragging. */\n  @Output('cdkDropListSorted')\n  sorted: EventEmitter<CdkDragSortEvent<T>> = new EventEmitter<CdkDragSortEvent<T>>();\n\n  constructor(\n    public element: ElementRef<HTMLElement>,\n    private _dragDropRegistry: DragDropRegistry<CdkDrag, CdkDropList<T>>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() private _dir?: Directionality,\n    @Optional() @SkipSelf() private _group?: CdkDropListGroup<CdkDropList>) {}\n\n  ngOnInit() {\n    this._dragDropRegistry.registerDropContainer(this);\n\n    if (this._group) {\n      this._group._items.add(this);\n    }\n  }\n\n  ngOnDestroy() {\n    this._dragDropRegistry.removeDropContainer(this);\n\n    if (this._group) {\n      this._group._items.delete(this);\n    }\n  }\n\n  /** Whether an item in the container is being dragged. */\n  _dragging = false;\n\n  /** Cache of the dimensions of all the items and the sibling containers. */\n  private _positionCache: PositionCache = {items: [], siblings: [], self: {} as ClientRect};\n\n  /**\n   * Draggable items that are currently active inside the container. Includes the items\n   * from `_draggables`, as well as any items that have been dragged in, but haven't\n   * been dropped yet.\n   */\n  private _activeDraggables: CdkDrag[];\n\n  /**\n   * Keeps track of the item that was last swapped with the dragged item, as\n   * well as what direction the pointer was moving in when the swap occured.\n   */\n  private _previousSwap = {drag: null as CdkDrag | null, delta: 0};\n\n  /** Starts dragging an item. */\n  start(): void {\n    this._dragging = true;\n    this._activeDraggables = this._draggables.toArray();\n    this._cachePositions();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Drops an item into this container.\n   * @param item Item being dropped into the container.\n   * @param currentIndex Index at which the item should be inserted.\n   * @param previousContainer Container from which the item got dragged in.\n   */\n  drop(item: CdkDrag, currentIndex: number, previousContainer: CdkDropList): void {\n    this._reset();\n    this.dropped.emit({\n      item,\n      currentIndex,\n      previousIndex: previousContainer.getItemIndex(item),\n      container: this,\n      // TODO(crisbeto): reconsider whether to make this null if the containers are the same.\n      previousContainer\n    });\n  }\n\n  /**\n   * Emits an event to indicate that the user moved an item into the container.\n   * @param item Item that was moved into the container.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   */\n  enter(item: CdkDrag, pointerX: number, pointerY: number): void {\n    this.entered.emit({item, container: this});\n    this.start();\n\n    // We use the coordinates of where the item entered the drop\n    // zone to figure out at which index it should be inserted.\n    const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n    const currentIndex = this._activeDraggables.indexOf(item);\n    const newPositionReference = this._activeDraggables[newIndex];\n    const placeholder = item.getPlaceholderElement();\n\n    // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n    // into another container and back again), we have to ensure that it isn't duplicated.\n    if (currentIndex > -1) {\n      this._activeDraggables.splice(currentIndex, 1);\n    }\n\n    // Don't use items that are being dragged as a reference, because\n    // their element has been moved down to the bottom of the body.\n    if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n      const element = newPositionReference.getRootElement();\n      element.parentElement!.insertBefore(placeholder, element);\n      this._activeDraggables.splice(newIndex, 0, item);\n    } else {\n      this.element.nativeElement.appendChild(placeholder);\n      this._activeDraggables.push(item);\n    }\n\n    // The transform needs to be cleared so it doesn't throw off the measurements.\n    placeholder.style.transform = '';\n\n    // Note that the positions were already cached when we called `start` above,\n    // but we need to refresh them since the amount of items has changed.\n    this._cachePositions();\n  }\n\n  /**\n   * Removes an item from the container after it was dragged into another container by the user.\n   * @param item Item that was dragged out.\n   */\n  exit(item: CdkDrag): void {\n    this._reset();\n    this.exited.emit({item, container: this});\n  }\n\n  /**\n   * Figures out the index of an item in the container.\n   * @param item Item whose index should be determined.\n   */\n  getItemIndex(item: CdkDrag): number {\n    if (!this._dragging) {\n      return this._draggables.toArray().indexOf(item);\n    }\n\n    // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n    // The rest of the logic still stands no matter what orientation we're in, however\n    // we need to invert the array when determining the index.\n    const items = this.orientation === 'horizontal' && this._dir && this._dir.value === 'rtl' ?\n        this._positionCache.items.slice().reverse() : this._positionCache.items;\n\n    return findIndex(items, currentItem => currentItem.drag === item);\n  }\n\n  /**\n   * Sorts an item inside the container based on its position.\n   * @param item Item to be sorted.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   * @param pointerDeta Direction in which the pointer is moving along each axis.\n   */\n  _sortItem(item: CdkDrag, pointerX: number, pointerY: number,\n            pointerDelta: {x: number, y: number}): void {\n    // Don't sort the item if it's out of range.\n    if (!this._isPointerNearDropContainer(pointerX, pointerY)) {\n      return;\n    }\n\n    const siblings = this._positionCache.items;\n    const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n\n    if (newIndex === -1 && siblings.length > 0) {\n      return;\n    }\n\n    const isHorizontal = this.orientation === 'horizontal';\n    const currentIndex = findIndex(siblings, currentItem => currentItem.drag === item);\n    const siblingAtNewPosition = siblings[newIndex];\n    const currentPosition = siblings[currentIndex].clientRect;\n    const newPosition = siblingAtNewPosition.clientRect;\n    const delta = currentIndex > newIndex ? 1 : -1;\n\n    this._previousSwap.drag = siblingAtNewPosition.drag;\n    this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n\n    // How many pixels the item's placeholder should be offset.\n    const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n\n    // How many pixels all the other items should be offset.\n    const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n\n    // Save the previous order of the items before moving the item to its new index.\n    // We use this to check whether an item has been moved as a result of the sorting.\n    const oldOrder = siblings.slice();\n\n    // Shuffle the array in place.\n    moveItemInArray(siblings, currentIndex, newIndex);\n\n    this.sorted.emit({\n      previousIndex: currentIndex,\n      currentIndex: newIndex,\n      container: this,\n      item\n    });\n\n    siblings.forEach((sibling, index) => {\n      // Don't do anything if the position hasn't changed.\n      if (oldOrder[index] === sibling) {\n        return;\n      }\n\n      const isDraggedItem = sibling.drag === item;\n      const offset = isDraggedItem ? itemOffset : siblingOffset;\n      const elementToOffset = isDraggedItem ? item.getPlaceholderElement() :\n                                              sibling.drag.getRootElement();\n\n      // Update the offset to reflect the new position.\n      sibling.offset += offset;\n\n      // Since we're moving the items with a `transform`, we need to adjust their cached\n      // client rects to reflect their new position, as well as swap their positions in the cache.\n      // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n      // elements may be mid-animation which will give us a wrong result.\n      if (isHorizontal) {\n        // Round the transforms since some browsers will\n        // blur the elements, for sub-pixel transforms.\n        elementToOffset.style.transform = `translate3d(${Math.round(sibling.offset)}px, 0, 0)`;\n        this._adjustClientRect(sibling.clientRect, 0, offset);\n      } else {\n        elementToOffset.style.transform = `translate3d(0, ${Math.round(sibling.offset)}px, 0)`;\n        this._adjustClientRect(sibling.clientRect, offset, 0);\n      }\n    });\n  }\n\n  /**\n   * Figures out whether an item should be moved into a sibling\n   * drop container, based on its current position.\n   * @param item Drag item that is being moved.\n   * @param x Position of the item along the X axis.\n   * @param y Position of the item along the Y axis.\n   */\n  _getSiblingContainerFromPosition(item: CdkDrag, x: number, y: number): CdkDropList | null {\n    const result = this._positionCache.siblings\n        .find(sibling => isInsideClientRect(sibling.clientRect, x, y));\n\n    return result && result.drop.enterPredicate(item, result.drop) ? result.drop : null;\n  }\n\n  /**\n   * Checks whether an item that started in this container can be returned to it,\n   * after it was moved out into another container.\n   * @param x Position of the item along the X axis.\n   * @param y Position of the item along the Y axis.\n   */\n  _canReturnItem(x: number, y: number): boolean {\n    return isInsideClientRect(this._positionCache.self, x, y);\n  }\n\n  /** Refreshes the position cache of the items and sibling containers. */\n  private _cachePositions() {\n    const isHorizontal = this.orientation === 'horizontal';\n\n    this._positionCache.self = this.element.nativeElement.getBoundingClientRect();\n    this._positionCache.items = this._activeDraggables\n      .map(drag => {\n        const elementToMeasure = this._dragDropRegistry.isDragging(drag) ?\n            // If the element is being dragged, we have to measure the\n            // placeholder, because the element is hidden.\n            drag.getPlaceholderElement() :\n            drag.getRootElement();\n        const clientRect = elementToMeasure.getBoundingClientRect();\n\n        return {\n          drag,\n          offset: 0,\n          // We need to clone the `clientRect` here, because all the values on it are readonly\n          // and we need to be able to update them. Also we can't use a spread here, because\n          // the values on a `ClientRect` aren't own properties. See:\n          // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n          clientRect: {\n            top: clientRect.top,\n            right: clientRect.right,\n            bottom: clientRect.bottom,\n            left: clientRect.left,\n            width: clientRect.width,\n            height: clientRect.height\n          }\n        };\n      })\n      .sort((a, b) => {\n        return isHorizontal ? a.clientRect.left - b.clientRect.left :\n                              a.clientRect.top - b.clientRect.top;\n      });\n\n    this._positionCache.siblings = this._getConnectedLists().map(drop => ({\n      drop,\n      clientRect: drop.element.nativeElement.getBoundingClientRect()\n    }));\n  }\n\n  /** Resets the container to its initial state. */\n  private _reset() {\n    this._dragging = false;\n\n    // TODO(crisbeto): may have to wait for the animations to finish.\n    this._activeDraggables.forEach(item => item.getRootElement().style.transform = '');\n    this._activeDraggables = [];\n    this._positionCache.items = [];\n    this._positionCache.siblings = [];\n    this._previousSwap.drag = null;\n    this._previousSwap.delta = 0;\n  }\n\n  /**\n   * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n   * @param clientRect `ClientRect` that should be updated.\n   * @param top Amount to add to the `top` position.\n   * @param left Amount to add to the `left` position.\n   */\n  private _adjustClientRect(clientRect: ClientRect, top: number, left: number) {\n    clientRect.top += top;\n    clientRect.bottom = clientRect.top + clientRect.height;\n\n    clientRect.left += left;\n    clientRect.right = clientRect.left + clientRect.width;\n  }\n\n  /**\n   * Gets the index of an item in the drop container, based on the position of the user's pointer.\n   * @param item Item that is being sorted.\n   * @param pointerX Position of the user's pointer along the X axis.\n   * @param pointerY Position of the user's pointer along the Y axis.\n   * @param delta Direction in which the user is moving their pointer.\n   */\n  private _getItemIndexFromPointerPosition(item: CdkDrag, pointerX: number, pointerY: number,\n                                           delta?: {x: number, y: number}) {\n\n    const isHorizontal = this.orientation === 'horizontal';\n\n    return findIndex(this._positionCache.items, ({drag, clientRect}, _, array) => {\n      if (drag === item) {\n        // If there's only one item left in the container, it must be\n        // the dragged item itself so we use it as a reference.\n        return array.length < 2;\n      }\n\n      if (delta) {\n        const direction = isHorizontal ? delta.x : delta.y;\n\n        // If the user is still hovering over the same item as last time, and they didn't change\n        // the direction in which they're dragging, we don't consider it a direction swap.\n        if (drag === this._previousSwap.drag && direction === this._previousSwap.delta) {\n          return false;\n        }\n      }\n\n      return isHorizontal ?\n          // Round these down since most browsers report client rects with\n          // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n          pointerX >= Math.floor(clientRect.left) && pointerX <= Math.floor(clientRect.right) :\n          pointerY >= Math.floor(clientRect.top) && pointerY <= Math.floor(clientRect.bottom);\n    });\n  }\n\n  /**\n   * Checks whether the pointer coordinates are close to the drop container.\n   * @param pointerX Coordinates along the X axis.\n   * @param pointerY Coordinates along the Y axis.\n   */\n  private _isPointerNearDropContainer(pointerX: number, pointerY: number): boolean {\n    const {top, right, bottom, left, width, height} = this._positionCache.self;\n    const xThreshold = width * DROP_PROXIMITY_THRESHOLD;\n    const yThreshold = height * DROP_PROXIMITY_THRESHOLD;\n\n    return pointerY > top - yThreshold && pointerY < bottom + yThreshold &&\n           pointerX > left - xThreshold && pointerX < right + xThreshold;\n  }\n\n  /**\n   * Gets the offset in pixels by which the item that is being dragged should be moved.\n   * @param currentPosition Current position of the item.\n   * @param newPosition Position of the item where the current item should be moved.\n   * @param delta Direction in which the user is moving.\n   */\n  private _getItemOffsetPx(currentPosition: ClientRect, newPosition: ClientRect, delta: 1 | -1) {\n    const isHorizontal = this.orientation === 'horizontal';\n    let itemOffset = isHorizontal ? newPosition.left - currentPosition.left :\n                                    newPosition.top - currentPosition.top;\n\n    // Account for differences in the item width/height.\n    if (delta === -1) {\n      itemOffset += isHorizontal ? newPosition.width - currentPosition.width :\n                                   newPosition.height - currentPosition.height;\n    }\n\n    return itemOffset;\n  }\n\n  /**\n   * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n   * @param currentIndex Index of the item currently being dragged.\n   * @param siblings All of the items in the list.\n   * @param delta Direction in which the user is moving.\n   */\n  private _getSiblingOffsetPx(currentIndex: number,\n                              siblings: ItemPositionCacheEntry[],\n                              delta: 1 | -1) {\n\n    const isHorizontal = this.orientation === 'horizontal';\n    const currentPosition = siblings[currentIndex].clientRect;\n    const immediateSibling = siblings[currentIndex + delta * -1];\n    let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n\n    if (immediateSibling) {\n      const start = isHorizontal ? 'left' : 'top';\n      const end = isHorizontal ? 'right' : 'bottom';\n\n      // Get the spacing between the start of the current item and the end of the one immediately\n      // after it in the direction in which the user is dragging, or vice versa. We add it to the\n      // offset in order to push the element to where it will be when it's inline and is influenced\n      // by the `margin` of its siblings.\n      if (delta === -1) {\n        siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n      } else {\n        siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n      }\n    }\n\n    return siblingOffset;\n  }\n\n  /** Gets an array of unique drop lists that the current list is connected to. */\n  private _getConnectedLists(): CdkDropList[] {\n    const siblings = coerceArray(this.connectedTo).map(drop => {\n      return typeof drop === 'string' ? this._dragDropRegistry.getDropContainer(drop)! : drop;\n    });\n\n    if (this._group) {\n      this._group._items.forEach(drop => {\n        if (siblings.indexOf(drop) === -1) {\n          siblings.push(drop);\n        }\n      });\n    }\n\n    return siblings.filter(drop => drop && drop !== this);\n  }\n}\n\n\n/**\n * Finds the index of an item that matches a predicate function. Used as an equivalent\n * of `Array.prototype.find` which isn't part of the standard Google typings.\n * @param array Array in which to look for matches.\n * @param predicate Function used to determine whether an item is a match.\n */\nfunction findIndex<T>(array: T[],\n                      predicate: (value: T, index: number, obj: T[]) => boolean): number {\n\n  for (let i = 0; i < array.length; i++) {\n    if (predicate(array[i], i, array)) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\n\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param clientRect ClientRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nfunction isInsideClientRect(clientRect: ClientRect, x: number, y: number) {\n  const {top, bottom, left, right} = clientRect;\n  return y >= top && y <= bottom && x >= left && x <= right;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, OnDestroy} from '@angular/core';\n\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\n@Directive({\n  selector: '[cdkDropListGroup]',\n  exportAs: 'cdkDropListGroup',\n})\nexport class CdkDropListGroup<T> implements OnDestroy {\n  /** Drop lists registered inside the group. */\n  readonly _items = new Set<T>();\n\n  ngOnDestroy() {\n    this._items.clear();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nexport function moveItemInArray<T = any>(array: T[], fromIndex: number, toIndex: number): void {\n  const from = clamp(fromIndex, array.length - 1);\n  const to = clamp(toIndex, array.length - 1);\n\n  if (from === to) {\n    return;\n  }\n\n  const target = array[from];\n  const delta = to < from ? -1 : 1;\n\n  for (let i = from; i !== to; i += delta) {\n    array[i] = array[i + delta];\n  }\n\n  array[to] = target;\n}\n\n\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nexport function transferArrayItem<T = any>(currentArray: T[],\n                                           targetArray: T[],\n                                           currentIndex: number,\n                                           targetIndex: number): void {\n  const from = clamp(currentIndex, currentArray.length - 1);\n  const to = clamp(targetIndex, targetArray.length);\n\n  if (currentArray.length) {\n    targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n  }\n}\n\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nexport function copyArrayItem<T = any>(currentArray: T[],\n                                       targetArray: T[],\n                                       currentIndex: number,\n                                       targetIndex: number): void {\n  const to = clamp(targetIndex, targetArray.length);\n\n  if (currentArray.length) {\n    targetArray.splice(to, 0, currentArray[currentIndex]);\n  }\n}\n\n/** Clamps a number between zero and a maximum. */\nfunction clamp(value: number, max: number): number {\n  return Math.max(0, Math.min(max, value));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  ViewContainerRef,\n} from '@angular/core';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Observable, Subject, Subscription, Observer} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {DragDropRegistry} from './drag-drop-registry';\nimport {\n  CdkDragDrop,\n  CdkDragEnd,\n  CdkDragEnter,\n  CdkDragExit,\n  CdkDragMove,\n  CdkDragStart,\n} from './drag-events';\nimport {CdkDragHandle} from './drag-handle';\nimport {CdkDragPlaceholder} from './drag-placeholder';\nimport {CdkDragPreview} from './drag-preview';\nimport {CDK_DROP_LIST_CONTAINER, CdkDropListContainer} from './drop-list-container';\nimport {getTransformTransitionDurationInMs} from './transition-duration';\nimport {extendStyles, toggleNativeDragInteractions} from './drag-styling';\nimport {CDK_DRAG_PARENT} from './drag-parent';\n\n\n// TODO(crisbeto): add auto-scrolling functionality.\n// TODO(crisbeto): add an API for moving a draggable up/down the\n// list programmatically. Useful for keyboard controls.\n\n/** Object that can be used to configure the behavior of CdkDrag. */\nexport interface CdkDragConfig {\n  /**\n   * Minimum amount of pixels that the user should\n   * drag, before the CDK initiates a drag sequence.\n   */\n  dragStartThreshold: number;\n\n  /**\n   * Amount the pixels the user should drag before the CDK\n   * considers them to have changed the drag direction.\n   */\n  pointerDirectionChangeThreshold: number;\n}\n\n/** Injection token that can be used to configure the behavior of `CdkDrag`. */\nexport const CDK_DRAG_CONFIG = new InjectionToken<CdkDragConfig>('CDK_DRAG_CONFIG', {\n  providedIn: 'root',\n  factory: CDK_DRAG_CONFIG_FACTORY\n});\n\n/** @docs-private */\nexport function CDK_DRAG_CONFIG_FACTORY(): CdkDragConfig {\n  return {dragStartThreshold: 5, pointerDirectionChangeThreshold: 5};\n}\n\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({passive: false});\n\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n\n/** Element that can be moved inside a CdkDropList container. */\n@Directive({\n  selector: '[cdkDrag]',\n  exportAs: 'cdkDrag',\n  host: {\n    'class': 'cdk-drag',\n    '[class.cdk-drag-dragging]': '_hasStartedDragging && _isDragging()',\n  },\n  providers: [{\n    provide: CDK_DRAG_PARENT,\n    useExisting: CdkDrag\n  }]\n})\nexport class CdkDrag<T = any> implements AfterViewInit, OnDestroy {\n  private _document: Document;\n\n  /** Element displayed next to the user's pointer while the element is dragged. */\n  private _preview: HTMLElement;\n\n  /** Reference to the view of the preview element. */\n  private _previewRef: EmbeddedViewRef<any> | null;\n\n  /** Reference to the view of the placeholder element. */\n  private _placeholderRef: EmbeddedViewRef<any> | null;\n\n  /** Element that is rendered instead of the draggable item while it is being sorted. */\n  private _placeholder: HTMLElement;\n\n  /** Coordinates within the element at which the user picked up the element. */\n  private _pickupPositionInElement: Point;\n\n  /** Coordinates on the page at which the user picked up the element. */\n  private _pickupPositionOnPage: Point;\n\n  /**\n   * Reference to the element that comes after the draggable in the DOM, at the time\n   * it was picked up. Used for restoring its initial position when it's dropped.\n   */\n  private _nextSibling: Node | null;\n\n  /**\n   * CSS `transform` applied to the element when it isn't being dragged. We need a\n   * passive transform in order for the dragged element to retain its new position\n   * after the user has stopped dragging and because we need to know the relative\n   * position in case they start dragging again. This corresponds to `element.style.transform`.\n   */\n  private _passiveTransform: Point = {x: 0, y: 0};\n\n  /** CSS `transform` that is applied to the element while it's being dragged. */\n  private _activeTransform: Point = {x: 0, y: 0};\n\n  /** Inline `transform` value that the element had before the first dragging sequence. */\n  private _initialTransform?: string;\n\n  /**\n   * Whether the dragging sequence has been started. Doesn't\n   * necessarily mean that the element has been moved.\n   */\n  _hasStartedDragging: boolean;\n\n  /** Whether the element has moved since the user started dragging it. */\n  private _hasMoved: boolean;\n\n  /** Drop container in which the CdkDrag resided when dragging began. */\n  private _initialContainer: CdkDropListContainer;\n\n  /** Cached scroll position on the page when the element was picked up. */\n  private _scrollPosition: {top: number, left: number};\n\n  /** Emits when the item is being moved. */\n  private _moveEvents = new Subject<CdkDragMove<T>>();\n\n  /**\n   * Amount of subscriptions to the move event. Used to avoid\n   * hitting the zone if the consumer didn't subscribe to it.\n   */\n  private _moveEventSubscriptions = 0;\n\n  /** Keeps track of the direction in which the user is dragging along each axis. */\n  private _pointerDirectionDelta: {x: -1 | 0 | 1, y: -1 | 0 | 1};\n\n  /** Pointer position at which the last change in the delta occurred. */\n  private _pointerPositionAtLastDirectionChange: Point;\n\n  /** Root element that will be dragged by the user. */\n  private _rootElement: HTMLElement;\n\n  /** Subscription to pointer movement events. */\n  private _pointerMoveSubscription = Subscription.EMPTY;\n\n  /** Subscription to the event that is dispatched when the user lifts their pointer. */\n  private _pointerUpSubscription = Subscription.EMPTY;\n  /**\n   * Time at which the last touch event occurred. Used to avoid firing the same\n   * events multiple times on touch devices where the browser will fire a fake\n   * mouse event for each touch event, after a certain time.\n   */\n  private _lastTouchEventTime: number;\n\n  /** Subscription to the stream that initializes the root element. */\n  private _rootElementInitSubscription = Subscription.EMPTY;\n\n  /** Elements that can be used to drag the draggable item. */\n  @ContentChildren(CdkDragHandle, {descendants: true}) _handles: QueryList<CdkDragHandle>;\n\n  /** Element that will be used as a template to create the draggable item's preview. */\n  @ContentChild(CdkDragPreview) _previewTemplate: CdkDragPreview;\n\n  /** Template for placeholder element rendered to show where a draggable would be dropped. */\n  @ContentChild(CdkDragPlaceholder) _placeholderTemplate: CdkDragPlaceholder;\n\n  /** Arbitrary data to attach to this drag instance. */\n  @Input('cdkDragData') data: T;\n\n  /** Locks the position of the dragged element along the specified axis. */\n  @Input('cdkDragLockAxis') lockAxis: 'x' | 'y';\n\n  /**\n   * Selector that will be used to determine the root draggable element, starting from\n   * the `cdkDrag` element and going up the DOM. Passing an alternate root element is useful\n   * when trying to enable dragging on an element that you might not have access to.\n   */\n  @Input('cdkDragRootElement') rootElementSelector: string;\n\n  /** Whether starting to drag this element is disabled. */\n  @Input('cdkDragDisabled')\n  get disabled(): boolean {\n    return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled = false;\n\n  /** Emits when the user starts dragging the item. */\n  @Output('cdkDragStarted') started: EventEmitter<CdkDragStart> = new EventEmitter<CdkDragStart>();\n\n  /** Emits when the user stops dragging an item in the container. */\n  @Output('cdkDragEnded') ended: EventEmitter<CdkDragEnd> = new EventEmitter<CdkDragEnd>();\n\n  /** Emits when the user has moved the item into a new container. */\n  @Output('cdkDragEntered') entered: EventEmitter<CdkDragEnter<any>> =\n      new EventEmitter<CdkDragEnter<any>>();\n\n  /** Emits when the user removes the item its container by dragging it into another container. */\n  @Output('cdkDragExited') exited: EventEmitter<CdkDragExit<any>> =\n      new EventEmitter<CdkDragExit<any>>();\n\n  /** Emits when the user drops the item inside a container. */\n  @Output('cdkDragDropped') dropped: EventEmitter<CdkDragDrop<any>> =\n      new EventEmitter<CdkDragDrop<any>>();\n\n  /**\n   * Emits as the user is dragging the item. Use with caution,\n   * because this event will fire for every pixel that the user has dragged.\n   */\n  @Output('cdkDragMoved') moved: Observable<CdkDragMove<T>> =\n      Observable.create((observer: Observer<CdkDragMove<T>>) => {\n        const subscription = this._moveEvents.subscribe(observer);\n        this._moveEventSubscriptions++;\n\n        return () => {\n          subscription.unsubscribe();\n          this._moveEventSubscriptions--;\n        };\n      });\n\n  constructor(\n    /** Element that the draggable is attached to. */\n    public element: ElementRef<HTMLElement>,\n    /** Droppable container that the draggable is a part of. */\n    @Inject(CDK_DROP_LIST_CONTAINER) @Optional() @SkipSelf()\n    public dropContainer: CdkDropListContainer,\n    @Inject(DOCUMENT) document: any,\n    private _ngZone: NgZone,\n    private _viewContainerRef: ViewContainerRef,\n    private _viewportRuler: ViewportRuler,\n    private _dragDropRegistry: DragDropRegistry<CdkDrag<T>, CdkDropListContainer>,\n    @Inject(CDK_DRAG_CONFIG) private _config: CdkDragConfig,\n    @Optional() private _dir: Directionality) {\n      this._document = document;\n      _dragDropRegistry.registerDragItem(this);\n    }\n\n  /**\n   * Returns the element that is being used as a placeholder\n   * while the current element is being dragged.\n   */\n  getPlaceholderElement(): HTMLElement {\n    return this._placeholder;\n  }\n\n  /** Returns the root draggable element. */\n  getRootElement(): HTMLElement {\n    return this._rootElement;\n  }\n\n  /** Resets a standalone drag item to its initial position. */\n  reset(): void {\n    this._rootElement.style.transform = '';\n    this._activeTransform = {x: 0, y: 0};\n    this._passiveTransform = {x: 0, y: 0};\n  }\n\n  ngAfterViewInit() {\n    // We need to wait for the zone to stabilize, in order for the reference\n    // element to be in the proper place in the DOM. This is mostly relevant\n    // for draggable elements inside portals since they get stamped out in\n    // their original DOM position and then they get transferred to the portal.\n    this._rootElementInitSubscription = this._ngZone.onStable.asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        const rootElement = this._rootElement = this._getRootElement();\n        rootElement.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n        rootElement.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n        this._handles.changes.pipe(startWith(null)).subscribe(() =>\n            toggleNativeDragInteractions(rootElement, this.getChildHandles().length > 0));\n      });\n  }\n\n  ngOnDestroy() {\n    // The directive might have been destroyed before the root element is initialized.\n    if (this._rootElement) {\n      this._rootElement.removeEventListener('mousedown', this._pointerDown,\n          activeEventListenerOptions);\n      this._rootElement.removeEventListener('touchstart', this._pointerDown,\n          passiveEventListenerOptions);\n\n      // Do this check before removing from the registry since it'll\n      // stop being considered as dragged once it is removed.\n      if (this._isDragging()) {\n        // Since we move out the element to the end of the body while it's being\n        // dragged, we have to make sure that it's removed if it gets destroyed.\n        this._removeElement(this._rootElement);\n      }\n    }\n\n    this._rootElementInitSubscription.unsubscribe();\n    this._destroyPreview();\n    this._destroyPlaceholder();\n    this._nextSibling = null;\n    this._dragDropRegistry.removeDragItem(this);\n    this._removeSubscriptions();\n    this._moveEvents.complete();\n  }\n\n  /** Checks whether the element is currently being dragged. */\n  _isDragging() {\n    return this._dragDropRegistry.isDragging(this);\n  }\n\n  /** Gets only handles that are not inside descendant `CdkDrag` instances. */\n  private getChildHandles() {\n    return this._handles.filter(handle => handle._parentDrag === this);\n  }\n\n  /** Handler for the `mousedown`/`touchstart` events. */\n  _pointerDown = (event: MouseEvent | TouchEvent) => {\n    const handles = this.getChildHandles();\n\n    // Delegate the event based on whether it started from a handle or the element itself.\n    if (handles.length) {\n      const targetHandle = handles.find(handle => {\n        const element = handle.element.nativeElement;\n        const target = event.target;\n        return !!target && (target === element || element.contains(target as HTMLElement));\n      });\n\n      if (targetHandle && !targetHandle.disabled && !this.disabled) {\n        this._initializeDragSequence(targetHandle.element.nativeElement, event);\n      }\n    } else if (!this.disabled) {\n      this._initializeDragSequence(this._rootElement, event);\n    }\n  }\n\n  /**\n   * Sets up the different variables and subscriptions\n   * that will be necessary for the dragging sequence.\n   * @param referenceElement Element that started the drag sequence.\n   * @param event Browser event object that started the sequence.\n   */\n  private _initializeDragSequence(referenceElement: HTMLElement, event: MouseEvent | TouchEvent) {\n    // Always stop propagation for the event that initializes\n    // the dragging sequence, in order to prevent it from potentially\n    // starting another sequence for a draggable parent somewhere up the DOM tree.\n    event.stopPropagation();\n\n    const isDragging = this._isDragging();\n    const isTouchEvent = this._isTouchEvent(event);\n    const isAuxiliaryMouseButton = !isTouchEvent && (event as MouseEvent).button !== 0;\n    const isSyntheticEvent = !isTouchEvent && this._lastTouchEventTime &&\n        this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n\n    // If the event started from an element with the native HTML drag&drop, it'll interfere\n    // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n    // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n    // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n    // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n    // events from firing on touch devices.\n    if (event.target && (event.target as HTMLElement).draggable && event.type === 'mousedown') {\n      event.preventDefault();\n    }\n\n    // Abort if the user is already dragging or is using a mouse button other than the primary one.\n    if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent) {\n      return;\n    }\n\n    // Cache the previous transform amount only after the first drag sequence, because\n    // we don't want our own transforms to stack on top of each other.\n    if (this._initialTransform == null) {\n      this._initialTransform = this._rootElement.style.transform || '';\n    }\n\n    this._hasStartedDragging = this._hasMoved = false;\n    this._initialContainer = this.dropContainer;\n    this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n    this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n    this._scrollPosition = this._viewportRuler.getViewportScrollPosition();\n\n    // If we have a custom preview template, the element won't be visible anyway so we avoid the\n    // extra `getBoundingClientRect` calls and just move the preview next to the cursor.\n    this._pickupPositionInElement = this._previewTemplate ? {x: 0, y: 0} :\n        this._getPointerPositionInElement(referenceElement, event);\n    const pointerPosition = this._pickupPositionOnPage = this._getPointerPositionOnPage(event);\n    this._pointerDirectionDelta = {x: 0, y: 0};\n    this._pointerPositionAtLastDirectionChange = {x: pointerPosition.x, y: pointerPosition.y};\n    this._dragDropRegistry.startDragging(this, event);\n  }\n\n  /** Starts the dragging sequence. */\n  private _startDragSequence(event: MouseEvent | TouchEvent) {\n    // Emit the event on the item before the one on the container.\n    this.started.emit({source: this});\n\n    if (this._isTouchEvent(event)) {\n      this._lastTouchEventTime = Date.now();\n    }\n\n    if (this.dropContainer) {\n      const element = this._rootElement;\n\n      // Grab the `nextSibling` before the preview and placeholder\n      // have been created so we don't get the preview by accident.\n      this._nextSibling = element.nextSibling;\n\n      const preview = this._preview = this._createPreviewElement();\n      const placeholder = this._placeholder = this._createPlaceholderElement();\n\n      // We move the element out at the end of the body and we make it hidden, because keeping it in\n      // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n      // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n      element.style.display = 'none';\n      this._document.body.appendChild(element.parentNode!.replaceChild(placeholder, element));\n      this._document.body.appendChild(preview);\n      this.dropContainer.start();\n    }\n  }\n\n  /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n  private _pointerMove = (event: MouseEvent | TouchEvent) => {\n    const pointerPosition = this._getConstrainedPointerPosition(event);\n\n    if (!this._hasStartedDragging) {\n      const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n      const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n\n      // Only start dragging after the user has moved more than the minimum distance in either\n      // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\n      // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n      // per pixel of movement (e.g. if the user moves their pointer quickly).\n      if (distanceX + distanceY >= this._config.dragStartThreshold) {\n        this._hasStartedDragging = true;\n        this._ngZone.run(() => this._startDragSequence(event));\n      }\n\n      return;\n    }\n\n    this._hasMoved = true;\n    event.preventDefault();\n    this._updatePointerDirectionDelta(pointerPosition);\n\n    if (this.dropContainer) {\n      this._updateActiveDropContainer(pointerPosition);\n    } else {\n      const activeTransform = this._activeTransform;\n      activeTransform.x =\n          pointerPosition.x - this._pickupPositionOnPage.x + this._passiveTransform.x;\n      activeTransform.y =\n          pointerPosition.y - this._pickupPositionOnPage.y + this._passiveTransform.y;\n      const transform = getTransform(activeTransform.x, activeTransform.y);\n\n      // Preserve the previous `transform` value, if there was one.\n      this._rootElement.style.transform = this._initialTransform ?\n          this._initialTransform + ' ' + transform : transform;\n\n      // Apply transform as attribute if dragging and svg element to work for IE\n      if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n        const appliedTransform = `translate(${activeTransform.x} ${activeTransform.y})`;\n        this._rootElement.setAttribute('transform', appliedTransform);\n      }\n    }\n\n    // Since this event gets fired for every pixel while dragging, we only\n    // want to fire it if the consumer opted into it. Also we have to\n    // re-enter the zone because we run all of the events on the outside.\n    if (this._moveEventSubscriptions > 0) {\n      this._ngZone.run(() => {\n        this._moveEvents.next({\n          source: this,\n          pointerPosition,\n          event,\n          delta: this._pointerDirectionDelta\n        });\n      });\n    }\n  }\n\n  /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n  private _pointerUp = () => {\n    if (!this._isDragging()) {\n      return;\n    }\n\n    this._removeSubscriptions();\n    this._dragDropRegistry.stopDragging(this);\n\n    if (!this._hasStartedDragging) {\n      return;\n    }\n\n    if (!this.dropContainer) {\n      // Convert the active transform into a passive one. This means that next time\n      // the user starts dragging the item, its position will be calculated relatively\n      // to the new passive transform.\n      this._passiveTransform.x = this._activeTransform.x;\n      this._passiveTransform.y = this._activeTransform.y;\n      this._ngZone.run(() => this.ended.emit({source: this}));\n      this._dragDropRegistry.stopDragging(this);\n      return;\n    }\n\n    this._animatePreviewToPlaceholder().then(() => {\n      this._cleanupDragArtifacts();\n      this._dragDropRegistry.stopDragging(this);\n    });\n  }\n\n  /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n  private _cleanupDragArtifacts() {\n    // Restore the element's visibility and insert it at its old position in the DOM.\n    // It's important that we maintain the position, because moving the element around in the DOM\n    // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n    // while moving the existing elements in all other cases.\n    this._rootElement.style.display = '';\n\n    if (this._nextSibling) {\n      this._nextSibling.parentNode!.insertBefore(this._rootElement, this._nextSibling);\n    } else {\n      this._initialContainer.element.nativeElement.appendChild(this._rootElement);\n    }\n\n    this._destroyPreview();\n    this._destroyPlaceholder();\n\n    // Re-enter the NgZone since we bound `document` events on the outside.\n    this._ngZone.run(() => {\n      const currentIndex = this.dropContainer.getItemIndex(this);\n\n      this.ended.emit({source: this});\n      this.dropped.emit({\n        item: this,\n        currentIndex,\n        previousIndex: this._initialContainer.getItemIndex(this),\n        container: this.dropContainer,\n        previousContainer: this._initialContainer\n      });\n      this.dropContainer.drop(this, currentIndex, this._initialContainer);\n      this.dropContainer = this._initialContainer;\n    });\n  }\n\n  /**\n   * Updates the item's position in its drop container, or moves it\n   * into a new one, depending on its current drag position.\n   */\n  private _updateActiveDropContainer({x, y}: Point) {\n    // Drop container that draggable has been moved into.\n    let newContainer = this.dropContainer._getSiblingContainerFromPosition(this, x, y);\n\n    // If we couldn't find a new container to move the item into, and the item has left it's\n    // initial container, check whether the it's allowed to return into its original container.\n    // This handles the case where two containers are connected one way and the user tries to\n    // undo dragging an item into a new container.\n    if (!newContainer && this.dropContainer !== this._initialContainer &&\n        this._initialContainer._canReturnItem(x, y)) {\n      newContainer = this._initialContainer;\n    }\n\n    if (newContainer) {\n      this._ngZone.run(() => {\n        // Notify the old container that the item has left.\n        this.exited.emit({item: this, container: this.dropContainer});\n        this.dropContainer.exit(this);\n        // Notify the new container that the item has entered.\n        this.entered.emit({item: this, container: newContainer!});\n        this.dropContainer = newContainer!;\n        this.dropContainer.enter(this, x, y);\n      });\n    }\n\n    this.dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\n    this._preview.style.transform =\n        getTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n  }\n\n  /**\n   * Creates the element that will be rendered next to the user's pointer\n   * and will be used as a preview of the element that is being dragged.\n   */\n  private _createPreviewElement(): HTMLElement {\n    let preview: HTMLElement;\n\n    if (this._previewTemplate) {\n      const viewRef = this._viewContainerRef.createEmbeddedView(this._previewTemplate.templateRef,\n                                                                this._previewTemplate.data);\n\n      preview = viewRef.rootNodes[0];\n      this._previewRef = viewRef;\n      preview.style.transform =\n          getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n    } else {\n      const element = this._rootElement;\n      const elementRect = element.getBoundingClientRect();\n\n      preview = deepCloneNode(element);\n      preview.style.width = `${elementRect.width}px`;\n      preview.style.height = `${elementRect.height}px`;\n      preview.style.transform = getTransform(elementRect.left, elementRect.top);\n    }\n\n    extendStyles(preview.style, {\n      position: 'fixed',\n      top: '0',\n      left: '0',\n      zIndex: '1000'\n    });\n\n    preview.classList.add('cdk-drag-preview');\n    preview.setAttribute('dir', this._dir ? this._dir.value : 'ltr');\n\n    return preview;\n  }\n\n  /** Creates an element that will be shown instead of the current element while dragging. */\n  private _createPlaceholderElement(): HTMLElement {\n    let placeholder: HTMLElement;\n\n    if (this._placeholderTemplate) {\n      this._placeholderRef = this._viewContainerRef.createEmbeddedView(\n        this._placeholderTemplate.templateRef,\n        this._placeholderTemplate.data\n      );\n      placeholder = this._placeholderRef.rootNodes[0];\n    } else {\n      placeholder = deepCloneNode(this._rootElement);\n    }\n\n    placeholder.classList.add('cdk-drag-placeholder');\n    return placeholder;\n  }\n\n  /**\n   * Figures out the coordinates at which an element was picked up.\n   * @param referenceElement Element that initiated the dragging.\n   * @param event Event that initiated the dragging.\n   */\n  private _getPointerPositionInElement(referenceElement: HTMLElement,\n                                       event: MouseEvent | TouchEvent): Point {\n    const elementRect = this._rootElement.getBoundingClientRect();\n    const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n    const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n    const point = this._isTouchEvent(event) ? event.targetTouches[0] : event;\n    const x = point.pageX - referenceRect.left - this._scrollPosition.left;\n    const y = point.pageY - referenceRect.top - this._scrollPosition.top;\n\n    return {\n      x: referenceRect.left - elementRect.left + x,\n      y: referenceRect.top - elementRect.top + y\n    };\n  }\n\n  /**\n   * Animates the preview element from its current position to the location of the drop placeholder.\n   * @returns Promise that resolves when the animation completes.\n   */\n  private _animatePreviewToPlaceholder(): Promise<void> {\n    // If the user hasn't moved yet, the transitionend event won't fire.\n    if (!this._hasMoved) {\n      return Promise.resolve();\n    }\n\n    const placeholderRect = this._placeholder.getBoundingClientRect();\n\n    // Apply the class that adds a transition to the preview.\n    this._preview.classList.add('cdk-drag-animating');\n\n    // Move the preview to the placeholder position.\n    this._preview.style.transform = getTransform(placeholderRect.left, placeholderRect.top);\n\n    // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n    // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n    // apply its style, we take advantage of the available info to figure out whether we need to\n    // bind the event in the first place.\n    const duration = getTransformTransitionDurationInMs(this._preview);\n\n    if (duration === 0) {\n      return Promise.resolve();\n    }\n\n    return this._ngZone.runOutsideAngular(() => {\n      return new Promise(resolve => {\n        const handler = ((event: TransitionEvent) => {\n          if (!event || (event.target === this._preview && event.propertyName === 'transform')) {\n            this._preview.removeEventListener('transitionend', handler);\n            resolve();\n            clearTimeout(timeout);\n          }\n        }) as EventListenerOrEventListenerObject;\n\n        // If a transition is short enough, the browser might not fire the `transitionend` event.\n        // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n        // fire if the transition hasn't completed when it was supposed to.\n        const timeout = setTimeout(handler as Function, duration * 1.5);\n        this._preview.addEventListener('transitionend', handler);\n      });\n    });\n  }\n\n  /**\n   * Helper to remove an element from the DOM and to do all the necessary null checks.\n   * @param element Element to be removed.\n   */\n  private _removeElement(element: HTMLElement | null) {\n    if (element && element.parentNode) {\n      element.parentNode.removeChild(element);\n    }\n  }\n\n  /** Determines the point of the page that was touched by the user. */\n  private _getPointerPositionOnPage(event: MouseEvent | TouchEvent): Point {\n    const point = this._isTouchEvent(event) ? event.touches[0] : event;\n\n    return {\n      x: point.pageX - this._scrollPosition.left,\n      y: point.pageY - this._scrollPosition.top\n    };\n  }\n\n  /** Gets the pointer position on the page, accounting for any position constraints. */\n  private _getConstrainedPointerPosition(event: MouseEvent | TouchEvent): Point {\n    const point = this._getPointerPositionOnPage(event);\n    const dropContainerLock = this.dropContainer ? this.dropContainer.lockAxis : null;\n\n    if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n      point.y = this._pickupPositionOnPage.y;\n    } else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n      point.x = this._pickupPositionOnPage.x;\n    }\n\n    return point;\n  }\n\n  /** Determines whether an event is a touch event. */\n  private _isTouchEvent(event: MouseEvent | TouchEvent): event is TouchEvent {\n    return event.type.startsWith('touch');\n  }\n\n  /** Destroys the preview element and its ViewRef. */\n  private _destroyPreview() {\n    if (this._preview) {\n      this._removeElement(this._preview);\n    }\n\n    if (this._previewRef) {\n      this._previewRef.destroy();\n    }\n\n    this._preview = this._previewRef = null!;\n  }\n\n  /** Destroys the placeholder element and its ViewRef. */\n  private _destroyPlaceholder() {\n    if (this._placeholder) {\n      this._removeElement(this._placeholder);\n    }\n\n    if (this._placeholderRef) {\n      this._placeholderRef.destroy();\n    }\n\n    this._placeholder = this._placeholderRef = null!;\n  }\n\n  /** Updates the current drag delta, based on the user's current pointer position on the page. */\n  private _updatePointerDirectionDelta(pointerPositionOnPage: Point) {\n    const {x, y} = pointerPositionOnPage;\n    const delta = this._pointerDirectionDelta;\n    const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n\n    // Amount of pixels the user has dragged since the last time the direction changed.\n    const changeX = Math.abs(x - positionSinceLastChange.x);\n    const changeY = Math.abs(y - positionSinceLastChange.y);\n\n    // Because we handle pointer events on a per-pixel basis, we don't want the delta\n    // to change for every pixel, otherwise anything that depends on it can look erratic.\n    // To make the delta more consistent, we track how much the user has moved since the last\n    // delta change and we only update it after it has reached a certain threshold.\n    if (changeX > this._config.pointerDirectionChangeThreshold) {\n      delta.x = x > positionSinceLastChange.x ? 1 : -1;\n      positionSinceLastChange.x = x;\n    }\n\n    if (changeY > this._config.pointerDirectionChangeThreshold) {\n      delta.y = y > positionSinceLastChange.y ? 1 : -1;\n      positionSinceLastChange.y = y;\n    }\n\n    return delta;\n  }\n\n  /** Gets the root draggable element, based on the `rootElementSelector`. */\n  private _getRootElement(): HTMLElement {\n    if (this.rootElementSelector) {\n      const selector = this.rootElementSelector;\n      let currentElement = this.element.nativeElement.parentElement as HTMLElement | null;\n\n      while (currentElement) {\n        // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\n        if (currentElement.matches ? currentElement.matches(selector) :\n            (currentElement as any).msMatchesSelector(selector)) {\n          return currentElement;\n        }\n\n        currentElement = currentElement.parentElement;\n      }\n    }\n\n    return this.element.nativeElement;\n  }\n\n  /** Unsubscribes from the global subscriptions. */\n  private _removeSubscriptions() {\n    this._pointerMoveSubscription.unsubscribe();\n    this._pointerUpSubscription.unsubscribe();\n  }\n}\n\n/** Point on the page or within an element. */\ninterface Point {\n  x: number;\n  y: number;\n}\n\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nfunction getTransform(x: number, y: number): string {\n  // Round the transforms since some browsers will\n  // blur the elements, for sub-pixel transforms.\n  return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n\n/** Creates a deep clone of an element. */\nfunction deepCloneNode(node: HTMLElement): HTMLElement {\n  const clone = node.cloneNode(true) as HTMLElement;\n  // Remove the `id` to avoid having multiple elements with the same id on the page.\n  clone.removeAttribute('id');\n  return clone;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value: string): number {\n  // Some browsers will return it in seconds, whereas others will return milliseconds.\n  const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n  return parseFloat(value) * multiplier;\n}\n\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nexport function getTransformTransitionDurationInMs(element: HTMLElement): number {\n  const computedStyle = getComputedStyle(element);\n  const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n  const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n\n  // If there's no transition for `all` or `transform`, we shouldn't do anything.\n  if (!property) {\n    return 0;\n  }\n\n  // Get the index of the property that we're interested in and match\n  // it up to the same index in `transition-delay` and `transition-duration`.\n  const propertyIndex = transitionedProperties.indexOf(property);\n  const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n  const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n\n  return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n         parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\n}\n\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle: CSSStyleDeclaration, name: string): string[] {\n  const value = computedStyle.getPropertyValue(name);\n  return value.split(',').map(part => part.trim());\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken, QueryList, ElementRef} from '@angular/core';\nimport {CdkDrag} from './drag';\n\n\nexport interface CdkDropListContainer<T = any> {\n  /** DOM node that corresponds to the drop container. */\n  element: ElementRef<HTMLElement>;\n\n  /** Arbitrary data to attach to all events emitted by this container. */\n  data: T;\n\n  /** Unique ID for the drop zone. */\n  id: string;\n\n  /** Direction in which the list is oriented. */\n  orientation: 'horizontal' | 'vertical';\n\n  /** Locks the position of the draggable elements inside the container along the specified axis. */\n  lockAxis: 'x' | 'y';\n\n  /** Whether starting a dragging sequence from this container is disabled. */\n  disabled: boolean;\n\n  /** Starts dragging an item. */\n  start(): void;\n\n  /**\n   * Drops an item into this container.\n   * @param item Item being dropped into the container.\n   * @param currentIndex Index at which the item should be inserted.\n   * @param previousContainer Container from which the item got dragged in.\n   */\n  drop(item: CdkDrag, currentIndex: number, previousContainer?: CdkDropListContainer): void;\n\n  /**\n   * Emits an event to indicate that the user moved an item into the container.\n   * @param item Item that was moved into the container.\n   * @param pointerX Position of the item along the X axis.\n   * @param pointerY Position of the item along the Y axis.\n   */\n  enter(item: CdkDrag, pointerX: number, pointerY: number): void;\n\n  /**\n   * Removes an item from the container after it was dragged into another container by the user.\n   * @param item Item that was dragged out.\n   */\n  exit(item: CdkDrag): void;\n\n  /**\n   * Figures out the index of an item in the container.\n   * @param item Item whose index should be determined.\n   */\n  getItemIndex(item: CdkDrag): number;\n  _sortItem(item: CdkDrag, pointerX: number, pointerY: number, delta: {x: number, y: number}): void;\n  _draggables: QueryList<CdkDrag>;\n  _getSiblingContainerFromPosition(item: CdkDrag, x: number, y: number):\n      CdkDropListContainer | null;\n  _canReturnItem(x: number, y: number): boolean;\n}\n\n/**\n * Injection token that is used to provide a CdkDropList instance to CdkDrag.\n * Used for avoiding circular imports.\n */\nexport const CDK_DROP_LIST_CONTAINER =\n    new InjectionToken<CdkDropListContainer>('CDK_DROP_LIST_CONTAINER');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, Input} from '@angular/core';\n\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\n@Directive({\n  selector: 'ng-template[cdkDragPreview]'\n})\nexport class CdkDragPreview<T = any> {\n  /** Context data to be added to the preview template instance. */\n  @Input() data: T;\n  constructor(public templateRef: TemplateRef<T>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef, Input} from '@angular/core';\n\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\n@Directive({\n  selector: 'ng-template[cdkDragPlaceholder]'\n})\nexport class CdkDragPlaceholder<T = any> {\n  /** Context data to be added to the placeholder template instance. */\n  @Input() data: T;\n  constructor(public templateRef: TemplateRef<T>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, Optional, Input} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CDK_DRAG_PARENT} from './drag-parent';\nimport {toggleNativeDragInteractions} from './drag-styling';\n\n/** Handle that can be used to drag and CdkDrag instance. */\n@Directive({\n  selector: '[cdkDragHandle]',\n  host: {\n    'class': 'cdk-drag-handle'\n  }\n})\nexport class CdkDragHandle {\n  /** Closest parent draggable instance. */\n  _parentDrag: {} | undefined;\n\n  /** Whether starting to drag through this handle is disabled. */\n  @Input('cdkDragHandleDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled = false;\n\n  constructor(\n    public element: ElementRef<HTMLElement>,\n    @Inject(CDK_DRAG_PARENT) @Optional() parentDrag?: any) {\n\n    this._parentDrag = parentDrag;\n    toggleNativeDragInteractions(element.nativeElement, false);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n// Helper type that ignores `readonly` properties. This is used in\n// `extendStyles` to ignore the readonly properties on CSSStyleDeclaration\n// since we won't be touching those anyway.\ntype Writeable<T> = { -readonly [P in keyof T]-?: T[P] };\n\n/**\n * Extended CSSStyleDeclaration that includes a couple of drag-related\n * properties that aren't in the built-in TS typings.\n */\ninterface DragCSSStyleDeclaration extends CSSStyleDeclaration {\n  webkitUserDrag: string;\n  MozUserSelect: string; // For some reason the Firefox property is in PascalCase.\n}\n\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * @docs-private\n */\nexport function extendStyles(\n    dest: Writeable<CSSStyleDeclaration>,\n    source: Partial<DragCSSStyleDeclaration>) {\n  for (let key in source) {\n    if (source.hasOwnProperty(key)) {\n      dest[key as keyof CSSStyleDeclaration] = source[key as keyof CSSStyleDeclaration];\n    }\n  }\n\n  return dest;\n}\n\n\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nexport function toggleNativeDragInteractions(element: HTMLElement, enable: boolean) {\n  const userSelect = enable ? '' : 'none';\n\n  extendStyles(element.style, {\n    touchAction: enable ? '' : 'none',\n    webkitUserDrag: enable ? '' : 'none',\n    webkitTapHighlightColor: enable ? '' : 'transparent',\n    userSelect: userSelect,\n    msUserSelect: userSelect,\n    webkitUserSelect: userSelect,\n    MozUserSelect: userSelect\n  });\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nexport const CDK_DRAG_PARENT = new InjectionToken<{}>('CDK_DRAG_PARENT');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, NgZone, OnDestroy, Inject} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {Subject} from 'rxjs';\n\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n  passive: false,\n  capture: true\n});\n\n/** Handler for a pointer event callback. */\ntype PointerEventHandler = (event: TouchEvent | MouseEvent) => void;\n\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\n@Injectable({providedIn: 'root'})\nexport class DragDropRegistry<I, C extends {id: string}> implements OnDestroy {\n  private _document: Document;\n\n  /** Registered drop container instances. */\n  private _dropInstances = new Set<C>();\n\n  /** Registered drag item instances. */\n  private _dragInstances = new Set<I>();\n\n  /** Drag item instances that are currently being dragged. */\n  private _activeDragInstances = new Set<I>();\n\n  /** Keeps track of the event listeners that we've bound to the `document`. */\n  private _globalListeners = new Map<'touchmove' | 'mousemove' | 'touchend' | 'mouseup' | 'wheel', {\n    handler: PointerEventHandler,\n    options?: AddEventListenerOptions | boolean\n  }>();\n\n  /**\n   * Emits the `touchmove` or `mousemove` events that are dispatched\n   * while the user is dragging a drag item instance.\n   */\n  readonly pointerMove: Subject<TouchEvent | MouseEvent> = new Subject<TouchEvent | MouseEvent>();\n\n  /**\n   * Emits the `touchend` or `mouseup` events that are dispatched\n   * while the user is dragging a drag item instance.\n   */\n  readonly pointerUp: Subject<TouchEvent | MouseEvent> = new Subject<TouchEvent | MouseEvent>();\n\n  constructor(\n    private _ngZone: NgZone,\n    @Inject(DOCUMENT) _document: any) {\n    this._document = _document;\n  }\n\n  /** Adds a drop container to the registry. */\n  registerDropContainer(drop: C) {\n    if (!this._dropInstances.has(drop)) {\n      if (this.getDropContainer(drop.id)) {\n        throw Error(`Drop instance with id \"${drop.id}\" has already been registered.`);\n      }\n\n      this._dropInstances.add(drop);\n    }\n  }\n\n  /** Adds a drag item instance to the registry. */\n  registerDragItem(drag: I) {\n    this._dragInstances.add(drag);\n\n    // The `touchmove` event gets bound once, ahead of time, because WebKit\n    // won't preventDefault on a dynamically-added `touchmove` listener.\n    // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n    if (this._dragInstances.size === 1) {\n      this._ngZone.runOutsideAngular(() => {\n        // The event handler has to be explicitly active,\n        // because newer browsers make it passive by default.\n        this._document.addEventListener('touchmove', this._preventScrollListener,\n            activeCapturingEventOptions);\n      });\n    }\n  }\n\n  /** Removes a drop container from the registry. */\n  removeDropContainer(drop: C) {\n    this._dropInstances.delete(drop);\n  }\n\n  /** Removes a drag item instance from the registry. */\n  removeDragItem(drag: I) {\n    this._dragInstances.delete(drag);\n    this.stopDragging(drag);\n\n    if (this._dragInstances.size === 0) {\n      this._document.removeEventListener('touchmove', this._preventScrollListener,\n          activeCapturingEventOptions);\n    }\n  }\n\n  /**\n   * Starts the dragging sequence for a drag instance.\n   * @param drag Drag instance which is being dragged.\n   * @param event Event that initiated the dragging.\n   */\n  startDragging(drag: I, event: TouchEvent | MouseEvent) {\n    this._activeDragInstances.add(drag);\n\n    if (this._activeDragInstances.size === 1) {\n      const isTouchEvent = event.type.startsWith('touch');\n      const moveEvent = isTouchEvent ? 'touchmove' : 'mousemove';\n      const upEvent = isTouchEvent ? 'touchend' : 'mouseup';\n\n      // We explicitly bind __active__ listeners here, because newer browsers will default to\n      // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n      // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n      this._globalListeners\n        .set(moveEvent, {\n          handler: e => this.pointerMove.next(e),\n          options: activeCapturingEventOptions\n        })\n        .set(upEvent, {\n          handler: e => this.pointerUp.next(e),\n          options: true\n        });\n\n      // TODO(crisbeto): prevent mouse wheel scrolling while\n      // dragging until we've set up proper scroll handling.\n      if (!isTouchEvent) {\n        this._globalListeners.set('wheel', {\n          handler: this._preventScrollListener,\n          options: activeCapturingEventOptions\n        });\n      }\n\n      this._ngZone.runOutsideAngular(() => {\n        this._globalListeners.forEach((config, name) => {\n          this._document.addEventListener(name, config.handler, config.options);\n        });\n      });\n    }\n  }\n\n  /** Stops dragging a drag item instance. */\n  stopDragging(drag: I) {\n    this._activeDragInstances.delete(drag);\n\n    if (this._activeDragInstances.size === 0) {\n      this._clearGlobalListeners();\n    }\n  }\n\n  /** Gets whether a drag item instance is currently being dragged. */\n  isDragging(drag: I) {\n    return this._activeDragInstances.has(drag);\n  }\n\n  /** Gets a drop container by its id. */\n  getDropContainer(id: string): C | undefined {\n    return Array.from(this._dropInstances).find(instance => instance.id === id);\n  }\n\n  ngOnDestroy() {\n    this._dragInstances.forEach(instance => this.removeDragItem(instance));\n    this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n    this._clearGlobalListeners();\n    this.pointerMove.complete();\n    this.pointerUp.complete();\n  }\n\n  /**\n   * Listener used to prevent `touchmove` and `wheel` events while the element is being dragged.\n   */\n  private _preventScrollListener = (event: Event) => {\n    if (this._activeDragInstances.size) {\n      event.preventDefault();\n    }\n  }\n\n  /** Clears out the global event listeners from the `document`. */\n  private _clearGlobalListeners() {\n    this._globalListeners.forEach((config, name) => {\n      this._document.removeEventListener(name, config.handler, config.options);\n    });\n\n    this._globalListeners.clear();\n  }\n}\n"],"names":[],"mappings":"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"}